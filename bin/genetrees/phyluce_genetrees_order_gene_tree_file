#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2015 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 01 June 2015 11:40 CDT (-0500)
"""

import argparse

import ete2

from phyluce.helpers import is_file, is_dir, FullPaths
from phyluce.log import setup_logging


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Root some genetrees"""
    )
    parser.add_argument(
        "--newick-treefile",
        required=True,
        action=FullPaths,
        type=is_file,
        help="""A newick-formatted treefile to input"""
    )
    parser.add_argument(
        "--output",
        required=True,
        action=FullPaths,
        help="""The output newick-formatted treefile to create"""
    )
    parser.add_argument(
        "--root",
        required=True,
        type=str,
        help="""The taxon on which to root trees"""
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use."""
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs."""
    )
    return parser.parse_args()


def get_tree_list(input):
    trees = []
    with open(input, "rU") as infile:
        for line in infile:
            line = line.strip()
            trees.append(ete2.Tree(line))
    return trees


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # read in trees
    log.info("Reading the treefile...")
    tree_list = get_tree_list(args.newick_treefile)
    log.info("Found {} trees.".format(len(tree_list)))
    trees_to_keep = []
    drop_count = 0
    log.info("Rerooting trees and sorting by count (high to low)...")
    for tree in tree_list:
        # get taxon list for trees - dont use treeset because taxon names include
        # all names in set
        tree_taxa = set(tree.get_leaf_names())
        # ensure outgroup is in taxon list
        if args.root in tree_taxa:
            tree.set_outgroup(tree&args.root)
            trees_to_keep.append([tree, len(tree_taxa)])
        else:
            drop_count += 1
    trees_to_keep = sorted(trees_to_keep, key=lambda x: x[1])[::-1]
    log.info("Dropped {} trees.  Retained {} trees".format(drop_count, len(trees_to_keep)))
    log.info("Writing trees...")
    with open(args.output, 'w') as outfile:
        for tree, count in trees_to_keep:
            outfile.write("{}\n".format(tree.write()))
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))


if __name__ == '__main__':
    main()

#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
(c) 2016 Brant Faircloth || http://faircloth-lab.org/
All rights reserved.

This code is distributed under a 3-clause BSD license. Please see
LICENSE.txt for more information.

Created on 05 February 2016 10:16 CST (-0600)
"""

import os
import re
import sys
import random
import argparse
import multiprocessing
from collections import defaultdict, Counter

from Bio import AlignIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio.Alphabet import IUPAC, Gapped, Alphabet
from Bio.Align import MultipleSeqAlignment

from phyluce.helpers import is_dir, FullPaths, CreateDir, get_alignment_files
from phyluce.log import setup_logging

import pdb


def get_args():
    """Screen a folder of phased alignments for variation"""
    parser = argparse.ArgumentParser(
        description="""Program description"""
    )
    parser.add_argument(
        '--alignments',
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""The directory containing the alignment files"""
    )
    parser.add_argument(
        '--output',
        required=True,
        action=CreateDir,
        help="The directory in which to store the output files"
    )
    parser.add_argument(
        "--input-format",
        dest="input_format",
        choices=['fasta', 'nexus', 'phylip', 'clustal', 'emboss', 'stockholm'],
        default='nexus',
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--output-format",
        dest="output_format",
        choices=['fasta', 'nexus', 'phylip', 'clustal', 'emboss', 'stockholm'],
        default='nexus',
        help="""The input alignment format""",
    )
    parser.add_argument(
        "--include-missing",
        action="store_true",
        default=False,
        help="""Include sites within missing/ambiguous information (-, ?, N, X)""",
    )
    parser.add_argument(
        "--random",
        action="store_true",
        default=False,
        help="""Pick one random site from each locus""",
    )
    parser.add_argument(
        "--numerical-encoding",
        action="store_true",
        default=False,
        help="""Output SNP calls encoded as 0 (ref/ref), 1 (ref/alt), or 2 (alt/alt)""",
    )
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="""Process alignments in parallel using --cores for alignment. """ +
        """This is the number of PHYSICAL CPUs."""
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use."""
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs."""
    )
    return parser.parse_args()


def concatenate_alignments(align, snp_list):
    for snp in snp_list:
        if align.get_alignment_length() == 0:
            align = snp
        else:
            align += snp
    return align


def worker(work):
    args, aln = work
    align = AlignIO.read(aln, args.input_format)
    fname = os.path.basename(aln)
    snp_list = []
    for idx in xrange(align.get_alignment_length()):
        # slice the aln column and uppercase everything
        col = align[:, idx].upper()
        # remove ambiguous characters from the slice
        # to determine if variable
        reduced = col.translate(None, "-NX?")
        # check for variation
        if len(reduced) > 1 and len(set(reduced)) > 1:
            align_slice = align[:, idx:idx + 1]
            # append variable slices to new alignment object
            if len(reduced) == len(align):
                snp_list.append(align_slice)
            elif args.include_missing:
                snp_list.append(align_slice)
            else:
                pass
        else:
            pass
    if len(snp_list) >= 1 and not args.numerical_encoding:
        new_align = MultipleSeqAlignment([], Gapped(IUPAC.ambiguous_dna, "-?"))
        if args.random:
            # pick a random site
            random_snp_list = [random.choice(snp_list)]
            new_align = concatenate_alignments(new_align, random_snp_list)
        else:
            # output all sites
            new_align = concatenate_alignments(new_align, snp_list)
        sys.stdout.write('.')
        sys.stdout.flush()
        return fname, new_align
    elif len(snp_list) >= 1 and args.numerical_encoding:
        d = defaultdict(tuple)
        if args.random:
            random_snp = random.choice(snp_list)
            all_bases = []
            for taxon in random_snp:
                taxon_result = re.search("^(.*)_(?:0|1)$", taxon.id)
                if taxon_result is not None:
                    taxon_name = taxon_result.groups()[0]
                    d[taxon_name] += (str(taxon.seq),)
                    all_bases.append(str(taxon.seq))
                else:
                    raise(IOError, "Improperly formatted taxon allele data")
            # get a counter of all bases
            all_bases_counter = Counter(all_bases)
            if len(all_bases_counter) == 2:
                ref = all_bases_counter.most_common(2)[0][0]
                alt = all_bases_counter.most_common(2)[1][0]
                combos = {(ref, ref): '0', (ref, alt): '1', (alt, ref): '1', (alt, alt): '2'}
                new_align = MultipleSeqAlignment([], Gapped(Alphabet(), "-?"))
                for taxon, snp in d.iteritems():
                    new_align.append(SeqRecord(Seq(combos[snp]), id=taxon, name='', description=''))
                sys.stdout.write('.')
                sys.stdout.flush()
                return fname, new_align
            else:
                sys.stdout.write('x')
                sys.stdout.flush()
                return fname, None
    else:
        return fname, None


def write_new_alignments(log, args, results):
    log.info("Writing alignments...")
    for fname, new_align in results:
        if new_align is not None:
            out_pth = os.path.join(args.output, fname)
            with open(out_pth, 'w') as outf:
                AlignIO.write(new_align, outf, args.output_format)
        else:
            pass


def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # find all alignments
    files = get_alignment_files(log, args.alignments, args.input_format)
    work = [(args, f) for f in files]
    log.info("Creating phased, SNP-only alignments using {} cores".format(
        args.cores
    ))
    sys.stdout.write('Processing')
    sys.stdout.flush()
    if args.cores <= 1:
        results = map(worker, work)
    elif args.cores > 1:
        pool = multiprocessing.Pool(args.cores)
        results = pool.map(worker, work)
    print ""
    # write results
    write_new_alignments(log, args, results)
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))

if __name__ == '__main__':
    main()

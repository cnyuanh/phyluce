#!/usr/bin/env python
# encoding: utf-8
"""
File: phyluce_align_include_exclude_taxa_from_alignments
Author: Carl Oliveros

Description: Includes/excludes taxa from folder of nexus alignments.

"""

import os
import sys
import glob
import argparse
from Bio.Nexus import Nexus
from Bio.Seq import Seq
from phyluce.helpers import is_dir, FullPaths, CreateDir
from phyluce.log import setup_logging

def get_args():
    parser = argparse.ArgumentParser(
        description='Includes/excludes taxa from folder of nexus alignments.')
    parser.add_argument(
        "--input",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="The input directory containing nexus files")
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="The directory in which to store the output files")
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "--exclude",
        type=str,
        default=[],
        nargs='+',
        help="Taxa to exclude")
    group.add_argument(
        "--include",
        type=str,
        default=[],
        nargs='+',
        help="Taxa to include")
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="The path to a directory to hold logs.")
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="The logging level to use.")
    return parser.parse_args()


def get_samples_to_delete(args, all_names):
    if args.exclude:
        return set([name for name in all_names if name in args.exclude])
    elif args.include:
        return set([name for name in all_names if name not in args.include])
    else:
        return []

def get_all_taxon_names(data):
    taxa = set()
    for align_file in data:
        fname, align = align_file
        for taxon in align.taxlabels:
            taxa.add(taxon)
    return taxa

def main():
    args = get_args()
    log, my_name = setup_logging(args)
    log.info("Reading input alignments in NEXUS format")
    # read nexus files
    nexus_files = glob.glob(os.path.join(os.path.expanduser(args.input), '*.nexus'))
    data = [(os.path.splitext(os.path.basename(fname))[0], Nexus.Nexus(fname)) for fname in nexus_files]
    log.info("{} alignments read".format(len(data)))
    taxa = get_all_taxon_names(data)
    delete_taxa = get_samples_to_delete(args, taxa)
    log.info("Writing nexus files")
    for fname, alignment in data:
        # delete unwanted taxa
        alignment.matrix = alignment.crop_matrix(delete=delete_taxa)
        alignment.ntax = len(alignment.matrix)
        alignment.taxlabels = alignment.matrix.keys()
        # remove sites with gap/missing data for all taxa
        gaps = alignment.gaponly(include_missing=True)
        if len(gaps) > 0:
            alignment.matrix = alignment.crop_matrix(exclude=gaps)
            alignment.nchar = len(alignment.matrix[alignment.taxlabels[0]]._data)
        # write out nexus
        alignment.write_nexus_data(os.path.join(args.output, fname + '.nexus'))
        # write progress dots to stdout
        sys.stdout.write(".")
        sys.stdout.flush()
    print('')
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))

if __name__ == '__main__':
    main()

#!/usr/bin/env python
# encoding: utf-8
"""
File: filter_characters_from_alignments.py
Author: Brant Faircloth

Created by Brant Faircloth on 24 July 2012 12:07 PDT (-0700)
Copyright (c) 2012 Brant C. Faircloth. All rights reserved.

Description: Used for filtering masked bases in a given alignment
from the output.  Used with BGI data to filter overaligned regions
from the output, replacing them w/ "".

"""

import os
import re
import glob
import argparse
from Bio import SeqIO
from Bio import AlignIO
from Bio.Seq import Seq
from Bio.Alphabet import generic_dna
from Bio.SeqRecord import SeqRecord
from phyluce.helpers import FullPaths, is_dir, get_file_extensions

#import pdb


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
            description="""For a given folder of alignments, replace masked bases and/or insertion characters and convert to FASTA sequence files""")
    parser.add_argument(
            "--alignments",
            required=True,
            action=FullPaths,
            type=is_dir,
            help="""The input alignment files to filter"""
        )
    parser.add_argument(
            "--output",
            required=True,
            action=FullPaths,
            type=is_dir,
            help="""The output FASTA file to create""",
        )
    parser.add_argument(
            "--input-format",
            dest="input_format",
            choices=['fasta', 'nexus', 'phylip', 'clustal', 'emboss', 'stockholm'],
            default='fasta',
            help="""The input alignment format""",
        )
    return parser.parse_args()


def get_files(input_dir, input_format):
    alignments = []
    for ftype in get_file_extensions(input_format):
        alignments.extend(glob.glob(os.path.join(input_dir, "*{}".format(ftype))))
    return alignments


def main():
    args = get_args()
    # iterate through all the files to determine the longest alignment
    files = get_files(args.alignments, args.input_format)
    for count, f in enumerate(files):
        new_records = []
        for align in AlignIO.parse(f, args.input_format):
            for oldseq in list(align):
                seqstr = str(oldseq.seq)
                #pdb.set_trace()
                new_seq = re.sub("[acgtn]", "", seqstr)
                new_seq = re.sub("-", "", new_seq)
                new_seq_record = SeqRecord(Seq(new_seq, generic_dna), id=oldseq.id, name=oldseq.name, description=oldseq.description)
                new_records.append(new_seq_record)
        outf = os.path.join(args.output, os.path.split(f)[1])
        SeqIO.write(new_records, open(outf, 'w'), 'fasta')
        print count


if __name__ == '__main__':
    main()
